{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "print(os.listdir(\"../input\"))\n",
    "print(os.listdir(\"../working\"))\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from fastai import *\n",
    "from fastai.vision import *\n",
    "import matplotlib\n",
    "import re\n",
    "%pylab inline\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"
   },
   "outputs": [],
   "source": [
    "train_data = pd.read_csv('../input/train.csv')\n",
    "test_data = pd.read_csv('../input/test.csv')\n",
    "print(train_data.shape)\n",
    "print(test_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_training_images = train_data.iloc[:,1:785].values\n",
    "training_images = np.array([np.reshape(i, (28, 28)) for i in input_training_images])\n",
    "training_labels = train_data.label\n",
    "\n",
    "input_testing_images = test_data.iloc[:,0:785].values\n",
    "testing_images = np.array([np.reshape(i, (28, 28)) for i in input_testing_images])\n",
    "\n",
    "print(training_images.shape)\n",
    "print(training_labels.shape)\n",
    "print(testing_images.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_count = -1\n",
    "test_count = -1\n",
    "os.mkdir(\"../working/images/\")\n",
    "os.mkdir(\"../working/images/test/\")\n",
    "os.mkdir(\"../working/images/train/\")\n",
    "\n",
    "#saving train files with naming convention: aaaa_b.jpeg (aaaa - counter, b - label). Eg. 15443_5.jpeg\n",
    "\n",
    "for i in range(len(training_labels)):\n",
    "    train_count +=1\n",
    "    train_files = matplotlib.image.imsave('../working/images/train/' + str(\"%04d\" % train_count) + '_' + str(training_labels.iloc[i]) + '.jpeg',\n",
    "                                          training_images[training_labels.index[i]], cmap='gray')\n",
    "    \n",
    "#saving test files with naming convention: aaaa.jpeg (aaaa - counter). Eg. 15443.jpeg\n",
    "for j in range(len(testing_images)):\n",
    "    test_count +=1\n",
    "    test_files = matplotlib.image.imsave('../working/images/test/' + str(\"%04d\" % test_count) + '.jpeg',\n",
    "                                          testing_images[j], cmap='gray')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(os.listdir(\"../working/images/train\")))\n",
    "print(len(os.listdir(\"../working/images/test\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_path_img = \"../working/images/train\"\n",
    "train_fnames = get_image_files(\"../working/images/train/\")\n",
    "train_fnames[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_path_img = \"../working/images/test\"\n",
    "test_fnames = get_image_files(\"../working/images/test/\")\n",
    "test_fnames[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(2)\n",
    "pat = re.compile(r'([0-9])\\.jpeg$')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ImageDataBunch.from_name_re(train_path_img,\n",
    "                                   train_fnames,\n",
    "                                   pat,\n",
    "                                   test=test_path_img,\n",
    "                                   ds_tfms=get_transforms(do_flip=False),\n",
    "                                   size=28, bs=64, num_workers=0).normalize(imagenet_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.show_batch(rows=3, figsize=(5,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(data.classes)\n",
    "len(data.classes),data.c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn = create_cnn(data, models.resnet34, metrics=error_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn.fit_one_cycle(4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
